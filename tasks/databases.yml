---

- set_fact:
    knex_root: "{{ ripple_solution_base }}/knexsql"
    knex_cmd:  "node {{ ripple_solution_base }}/knexsql/index.js"

- name: "Copy KNEXSQL Tools"
  copy:
    src:   knexsql
    dest:  "{{ ripple_solution_base }}"
    force: yes
    mode:  '0644'
    directory_mode: '0755'

- name: "Install KNEXSQL Tools"
  command: npm install
  args:
    chdir:   "{{ knex_root }}"
    creates: "{{ knex_root }}/node_modules"

- name: "Learn Schema Version"
  shell: "ls {{ ripple_solution_schema_base }}/*.sql | grep -Eo '[0-9]+\\.[0-9]+\\.[0-9]+' | sort | uniq"
  args:
    chdir: "{{ ripple_solution_schema_base }}"
  register: schema_version


- set_fact:
    database_info:
     - check_table:   db_schema_versions
       connection:    "{{ ripple_solution_db_dialect }}://{{ ripple_connect_db_admin_user }}:{{ ripple_connect_db_admin_pass }}@{{ ripple_connect_db_host }}:{{ ripple_connect_db_port }}/{{ ripple_connect_db_name }}"
       execute_file:  "{{ ripple_solution_schema_base }}/ripple-connect-{{ schema_version.stdout }}.sql"
       service_check: "{{ ripple_connect_enabled | bool }}"
     - check_table:   n_db_schema_versions
       connection:    "{{ ripple_solution_db_dialect }}://{{ ilp_validator_db_admin_user }}:{{ ilp_validator_db_admin_pass }}@{{ ilp_validator_db_host }}:{{ ilp_validator_db_port }}/{{ ilp_validator_db_name }}"
       execute_file:  "{{ ripple_solution_schema_base }}/validator-{{ schema_version.stdout }}.sql"
       service_check: "{{ ilp_validator_enabled | bool }}"
     - check_table:   c_db_schema_versions
       connection:    "{{ ripple_solution_db_dialect }}://{{ fx_connector_db_admin_user }}:{{ fx_connector_db_admin_pass }}@{{ fx_connector_db_host }}:{{ fx_connector_db_port }}/{{ fx_connector_db_name }}"
       execute_file:  "{{ ripple_solution_schema_base }}/connector-{{ schema_version.stdout }}.sql"
       service_check: "{{ fx_connector_enabled | bool }}"

- name: "Check DB Present"
  shell: "{{ knex_cmd }} <<< 'SELECT * FROM public.{{ item.check_table }};'"
  environment:
    KNEXSQL_DB: "{{ item.connection }}"
  changed_when: false
  failed_when: false
  register: db_present
  with_items:
   - "{{ database_info }}"

- name: "Create Database"
  shell: "{{ knex_cmd }} < {{ item.1.execute_file }}"
  environment:
    KNEXSQL_DB: "{{ item.1.connection }}"
  register: result
  failed_when: "'Error' in result.stderr or
                'error' in result.stderr or
                'must be owner' in result.stderr"
  when: "item.1.service_check and
         'does not exist' in db_present.results[item.0].stderr"
  with_indexed_items:
   - "{{ database_info }}"


- name: "Check Ledger Database"
  shell: "{{ knex_cmd }} <<< 'SELECT * FROM public.l_db_schema_versions;'"
  environment:
    KNEXSQL_DB: "{{ ripple_solution_db_dialect }}://{{ item.db_admin_user }}:{{ item.db_admin_pass }}@{{ item.db_host }}:{{ item.db_port }}/{{ item.db_name }}"
  changed_when: false
  failed_when: false
  register: ldg_db_present
  with_items:
   - "{{ ilp_ledgers }}"

- name: "Create Ledger Databases"
  shell: "{{ knex_cmd }} < {{ ripple_solution_schema_base }}/ledger-{{ schema_version.stdout }}.sql"
  environment:
    KNEXSQL_DB: "{{ ripple_solution_db_dialect }}://{{ item.1.db_admin_user }}:{{ item.1.db_admin_pass }}@{{ item.1.db_host }}:{{ item.1.db_port }}/{{ item.1.db_name }}"
  register: result
  failed_when: "'Error' in result.stderr or
                'error' in result.stderr or
                'must be owner' in result.stderr"
  when: "'does not exist' in ldg_db_present.results[item.0].stderr"
  with_indexed_items:
   - "{{ ilp_ledgers }}"
