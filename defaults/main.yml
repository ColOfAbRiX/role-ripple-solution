---
# defaults file for ripple-solution


#
# General Configuration
#

ripple_solution_enabled: true

# Version to install:
# - Leave empty for latest version, if not already installed;
# - "latest" to updated to latest version;
# - "x.y.z" to install a specific version
ripple_solution_version: ""

# Ripple Paths
ripple_solution_base:         /opt/ripple-solution
ripple_solution_config_base:  "{{ ripple_solution_base }}/config"
ripple_solution_cert_base:    "{{ ripple_solution_config_base }}/crypto"
ripple_solution_schema_base:  "{{ ripple_solution_base }}/schema/postgres"
ripple_solution_scripts_base: "{{ ripple_solution_base }}/scripts"

# User and group running Ripple
ripple_solution_user:  ripple_solution
ripple_solution_group: ripple_solution

# Used to reset (erase) the DB or the secrets on the machine
ripple_solution_reset_db: false
ripple_solution_reset_crypto: false

# If set to true, all passwords and secrets (like keys) will be encrypted in the
# files.
ripple_solution_encrypt_secrets: true
# All passwords are displayed by Ansible because they are in the data structure.
# Set this to true to disable their display
ripple_solution_no_log: true


#
# Database
#

ripple_solution_db_dialect: postgres

# User for database monitoring. If enabled, the user is created on the databases
# of all components
ripple_solution_db_monitor_enabled: false
ripple_solution_db_monitor_user: user_monitor
ripple_solution_db_monitor_pass: Passw0rd


#
# Certificates
#

#
# NOTES:
#  - The role can create its own certificate but its setup is quite simple and
#    not for production setup. It is recommended that you create the SSL
#    certificates in a different way and then copy them on the appropriate place
#    inside the ripple-solution directory structure. Then set the various _prefix
#    to the certificate names.
#  - All the certificates must be shared across members of the same cluster
#

# Prefix for certificate names. Full certificates names will be in the form of
# "<prefix>.crt" and the keys will be "<prefix>.key".
# The role will create the root CA, if missing, and any other missing certificate
ripple_solution_ca_prefix: "{{ ansible_hostname }}-ca"
ripple_solution_admin_crt_prefix: "{{ ansible_hostname }}-admin"
ripple_connect_crt_prefix: "{{ ansible_hostname }}-ripple-connect"
ledger_crt_prefix:         "{{ ansible_hostname }}-ledger"
validator_crt_prefix:      "{{ ansible_hostname }}-validator"
fx_connector_crt_prefix:   "{{ ansible_hostname }}-fx-connector"

# If set to true it will use the default Ripple repositories
ripple_solution_default_repo_enabled: true

# Certificates to access the Ripple repository
ripple_solution_repo_cert_files: []
# - "{{ ssl_certificates_base }}/ripple_solution/ripple-private.client.crt"
# - "{{ ssl_certificates_base }}/ripple_solution/ripple-private.client.crt"

# Certificates used by Ripple. These certificates will be copied in the
# certificates directory of Ripple.
# These certificates have precedence over the creation of new certificates. This
# means that if one of them matches the name specified in one *_crt_prefix
# variable, that certificate will not be created. This behaviour can be used to
# specify custom certificates for the Ripple instance.
ripple_solution_use_certs: []
# - "{{ ssl_certificates_base }}/ca/ripple_solution_ca.crt"

# Keys used by Ripple. These keys will be copied in the keys directory of Ripple.
# These keys have precedence over the creation of new keys. This means that if
# one of them matches the name specified in one *_crt_prefix variable, that
# key will not be created. This behaviour can be used to specify custom keys for
# the Ripple instance.
ripple_solution_use_keys: []
# - "{{ ssl_certificates_base }}/ca/ripple_solution_ca.key"

# Certificates of remote parties used by Ripple. These certificates will be
# copied in the remote certificates directory of Ripple.
ripple_solution_use_remote_certs: []
# - "{{ ssl_certificates_base }}/ca/ripple_solution_ca.crt"


#
# Ripple Connect
#

# Details of the configuration of the system service
ripple_connect_enabled: false
ripple_connect_port:    5000
ripple_connect_host:    "{{ ansible_fqdn }}"

# When using a redundant setup and clustering, this variable is used to make the
# Ansible role aware of the members of Ripple Connect cluster. Ansible will then
# execute some critical actions only once per cluster (on the first node of the
# cluster). The variable needs to be filled with a list of hostnames or FQDNs
# of the members of the cluster.
# NOTE: This variable must have the same value across all the members.
ripple_connect_cluster_members: ["{{ ansible_hostname }}"]

# Configuration of the connection to the database, the user and the Admin
ripple_connect_db_host: ''
ripple_connect_db_port: 5432
ripple_connect_db_user: user_rc
ripple_connect_db_pass: Passw0rd
ripple_connect_db_name: ripple_connect
# Administrator credentials for the database
ripple_connect_db_admin_user: ''
ripple_connect_db_admin_pass: ''

# Trusted certificates of external services. Certificates of the local
# Ripple services, where *_install_local=True, are trusted automatically.
ripple_connect_trusted_external_certs: []
# - ripple_solution_ca.crt

# Partners Configuration and their credentials to connect to the local instance
ripple_connect_partners: []
#   # Address of Ripple Connect or the partner
# - address:  partner.example.com:5000
#   # Credentials used by us to connect to the partner
#   username: ripple_connect_user
#   password: Passw0rd
#   # Credentials used by the partner to connect to us
#   partner_users:
#    - username: ripple_connect_user
#      password: Passw0rd

# FX Connectors managed by Ripple Connect. Don't include here local Connectors
# that use the setting "fx_connector_install_local=yes".
ripple_connect_fx_connectors: []
# - url: https://provider.example.com:3000

# ILP Validators managed by Ripple Connect. Don't include here local Validators
# that use the setting "ilp_validator_install_local=yes".
ripple_connect_ilp_validators: []
# - iri: https://provider.example.com:4000
#   public_key: CRiRdYySjsPfSS5b7C17Vkx8/RCzhfzd77RGw54NkLY=

# Ledgers managed by Ripple Connect. Don't include here local Ledgers that use
# the setting "install_local=yes".
ripple_connect_ledgers: []
# - currency: EUR
#   address:  eur.provider.example.com
#   account:  https://provider.example.com:6000/account/transact

# Pairing of connector-validators known by this Ripple Connect
ripple_connect_connector_validator_pairs: []
# - connector_url: https://provider.example.com:3000
#   validator_url: https://provider.example.com:4000

# Connector accounts, on the remote ledgers, managed by Ripple Connect
ripple_connect_nostro_accounts: []
#   # Currency of the account
# - currency: EUR
#   # Address of the FX Connector that owns the account
#   url: https://consumer.example.com:3000

# Setting this to true will instruct Ansible to take care of configuring all the
# Ripple Solution components installed on the machine with the configuration of
# this Ripple Connect
ripple_connect_install_local: true

# If present, the URL of the reverse proxy. The role assumes that the reverse
# proxy is in front of the load balancer (if present).
ripple_connect_reverse_proxy_url: ''

# If present, the URL of the load balancer. The role assumes that the reverse
# proxy (if present) is in front of the load balancer.
ripple_connect_load_balancer_url: ''

# Secret keys for Ripple Connect. If left empty Ansible will create the keys
# automatically but manual creation is recommended. Check the Ripple
# documentation on how to use the script secret_key_generator.js
# NOTE: All the secret keys must be shared across members of the same cluster
# and for this reason, when configuring a cluster, the only option is to create
# the key pair manually.
ripple_connect_mac_key: ''
ripple_connect_external_atk: ''
ripple_connect_client_atk: ''
ripple_connect_ilp_key: ''

# Users of Ripple Connect
ripple_connect_users: []
# - username: consumer_operator
#   password: Passw0rd
#   type:     operator
# - username: consumer_monitor
#   password: Passw0rd
#   type:     monitor
# - username: consumer_custom_rate_operator
#   password: Passw0rd
#   type:     custom_rate_operator

# Name of the Ripple Connect account on the Ledgers
ripple_connect_ledger_user: transact

# RabbitMQ configuration to push messages
ripple_connect_rabbitmq: {}
#  mq_uri: amqp://rabbit_server.example.com
#  mq_username: ripple_connect
#  mq_password: Passw0rd
#  mq_exchange: exchange.ripple.push-notifications
#  mq_accept_quote_routing_key: rk.ripple.quote.accept
#  mq_lock_quote_routing_key: rk.ripple.quote.lock
#  mq_settlement_executed_routing_key: rk.ripple.settlement_executed
#  mq_payment_succeeded_routing_key: rk.ripple.payment.succeeded
#  mq_fail_payment_routing_key: rk.ripple.payment.failed


# Ripple Connect specific configuration
ripple_connect_secrets_encrypted: "false"
ripple_connect_enable_ui: "true"
ripple_connect_config: {}
#  use_https: "true"
#  quote_expiration_mins: 720
#  sending_payment_expiration_offset_mins: 2160
#  settlement_payment_expiration_offset_mins: 2220
#  receiving_payment_expiration_offset_mins: 3660
#  log_level: info
#  secrets_file_path: secrets.json
#  settlement_expiry_duration_seconds: 120
#  access_token_expiration_hours: 12
#  access_token_length: 255
#  message_length_max: 255
#  sending_fee_percentage: 1
#  receiving_fee_percentage: 2
#  sending_fee_amount: 0.01
#  receiving_fee_amount: 0.02
#  currency_specific_fees:
#    USD:
#      sending_fee_amount: 0
#      sending_fee_percentage: 0.5
#    EUR:
#      receiving_fee_amount: 0.02
#      receiving_fee_percentage: 1.1
#  receiver_auto_accept_quote: "false"
#  requested_additional_info:
#    from_sender:
#     - secondary_id
#  api_prefix: ''
#  payment_labels:
#   - compliance_succeeded
#   - compliance_failed
#   - sending_payment_pending
#   - sending_payment_succeeded
#   - sending_payment_failed
#   - sending_postprocess_succeeded
#   - sending_postprocess_pending
#   - receiving_payment_pending
#   - receiving_postprocess_pending
#   - receiving_postprocess_succeeded
#  amount_decimal_scale: 2


#
# ILP Ledgers
#

# When using a redundant setup and clustering, this variable is used to make the
# Ansible role aware of the members of the Ledgers cluster. Ansible will then
# execute some critical actions only once per cluster (on the first node of the
# cluster). The variable needs to be filled with a list of hostnames or FQDNs
# of the members of the cluster.
# NOTE: This variable must have the same value across all the members.
# NOTE: Members of the same Ledgers cluster must be configured with the same
# ledgers.
ilp_ledgers_cluster_members: ["{{ ansible_hostname }}"]
# List of ILP Ledgers on the machine
ilp_ledgers: []
#   # Details of the configuration of the system service
# - name: ledger_eur
#   enabled: false
#   port: 6000
#   host: "{{ ansible_fqdn }}"
#
#   # This is usually the same as "ledger_crt_prefix"
#   crt_prefix: "{{ ledger_crt_prefix }}"
#
#   # Configuration of the connection to the database, the user and the Admin
#   db_host: ''
#   db_port: 5432
#   db_user: user_leur
#   db_pass: Passw0rd
#   db_name: ledger_eur
#   # Administrator credentials for the database
#   db_admin_user: ''
#   db_admin_pass: ''
#
#   # Currency managed by the Ledger
#   currency: EUR
#
#   # Setting this to true will instruct Ansible to take care of configuring all the
#   # Ripple Solution components installed on the machine with the configuration of
#   # this Ledger
#   install_local: true
#
#   # Trusted certificates of external services. Certificates of the local
#   # Ripple services, where *_install_local=True, are trusted automatically.
#   trusted_external_certs:
#    - ripple_solution_ca.crt
#
#   # Accounts to create on the Ledger. Accounts for local Ripple Solution
#   # components that are configured with *_install_local=True are created
#   # automatically.
#   # NOTE: Ansible checks the account name on the DB to determine if to create
#   # or to update it. If an account is already present, Ansible will take care
#   # of updating its data.
#   accounts:
#    - account:       connector_customer
#      # This is the fingerprint of the FX Connector certificate. It is used to
#      # trust the actions requested to this ledger.
#      fingerprint:   '46:0F:D7:68:B6:DA:4A:63:DE:DD:C6:00:00:54:BD:EE:6A:DB:6B:E1:89:FA:C2:27:1D:5B:AC:4B:50:18:50:1C'
#      # Usually, when configuring a customer, this URL is the notification URL
#      # for Ripple Connect
#      notifications: 'https://provider.example.com:5000/ledger/notifications'
#      balance:       0
#
#   # If present, the URL of the reverse proxy. The role assumes that the reverse
#   # proxy is in front of the load balancer (if present).
#   reverse_proxy_url: ''
#
#   # If present, the URL of the load balancer. The role assumes that the reverse
#   # proxy (if present) is in front of the load balancer.
#   load_balancer_url: ''
#
#   # Ledger configuration
#   config:
#     log_level: info
#     use_https: "true"
#     auth_client_cert_enabled: "true"


#
# FX Connector
#

# Details of the configuration of the system service
fx_connector_enabled: no
fx_connector_port: 3000
fx_connector_host: "{{ ansible_fqdn }}"

# When using a redundant setup and clustering, this variable is used to make the
# Ansible role aware of the members of FX Connector cluster. Ansible will then
# execute some critical actions only once per cluster (on the first node of the
# cluster). The variable needs to be filled with a list of hostnames or FQDNs
# of the members of the cluster.
# NOTE: This variable must have the same value across all the members.
fx_connector_cluster_members: ["{{ ansible_hostname }}"]

# Configuration of the connection to the database, the user and the Admin
fx_connector_db_host: ''
fx_connector_db_port: 5432
fx_connector_db_user: user_fxc
fx_connector_db_pass: Passw0rd
fx_connector_db_name: fx_connector
# Administrator credentials for the database
fx_connector_db_admin_user: ''
fx_connector_db_admin_pass: ''

# Trusted certificates of external services. Certificates of the local
# Ripple services, where *_install_local=True, are trusted automatically.
fx_connector_trusted_external_certs: []
# - ripple_solution_ca.crt

# Known remote ledgers managed by this FX Connector. If the local Ledgers are
# configured with "ilp_ledgers[*].install_local=True, the configuration of the
# ledgers will be added automatically to this configuration.
fx_connector_ledgers: []
# - url: https://consumer.example.com:6000
#   # Name of the account of this instance of the FX connector on the consumer ledger.
#   # It's recommended to choose a name that represents both the provider hostname and
#   # the connector account
#   account_name: connector_consumer
#   # Remote ledger certificate to trust
#   cert: ripple_solution_ca.crt
#   # Fingerprint of the SSL certificate of Ripple Connect on the provider that
#   # owns the account on the ledger. NOTE that even if this entry is for the
#   # account for the consumer this is the fingerprint of the SSL certificate of
#   # Ripple Connect on the provider.
#   fingerprints:
#    - '8F:14:75:41:85:43:CB:16:70:21:02:B3:28:8A:9A:6E:B6:8C:89:55:E3:28:F1:F4:E3:FA:A4:23:40:23:43:7B'

# Associations between ledgers managed by this FX Connector (if the FX Connector
# is enabled this list must be filled). Don't put the pair twice, Ansible will
# create a definition for both directions in the configuration (eg. don't use
# GBP@provider-EUR@consumer + EUR@consumer-GBP@provider)
fx_connector_pairs: []
# - -'EUR@https://provider.example.com:6000'
#   - EUR@https://consumer.example.com:6000'

# Setting this to true will instruct Ansible to take care of configuring all the
# Ripple Solution components installed on the machine with the configuration of
# this FX Connector
fx_connector_install_local: true

# If present, the URL of the reverse proxy. The role assumes that the reverse
# proxy is in front of the load balancer (if present).
fx_connector_reverse_proxy_url: ''

# If present, the URL of the load balancer. The role assumes that the reverse
# proxy (if present) is in front of the load balancer.
fx_connector_load_balancer_url: ''

# The ILP Validator to associate with this FX Connector. Don't include here
# local Validators that use the setting "ilp_validator_install_local=yes".
fx_connector_use_validator_url: ''

# Quote HMAC key for the FX Connector. If left empty Ansible will create the key
# automatically but manual creation is recommended. Check the Ripple
# documentation on how to use the script secret_key_generator.js
# NOTE: The fx_connector_quote_hmac_key must be shared across members of the same
# cluster and for this reason, when configuring a cluster, the only option is to
# create the key manually.
fx_connector_quote_hmac_key: ''

# Name of the FX Connector account on the local Ledgers
fx_connector_local_ledger_account: connector_local

# Connector configuration
fx_connector_config: {}
#  log_level: info
#  use_https: "true"
#  downtime_tolerance_interval: 5000


#
# ILP Validator
#

# Details of the configuration of the system service
ilp_validator_enabled: no
ilp_validator_port: 4000
ilp_validator_host: "{{ ansible_fqdn }}"

# When using a redundant setup and clustering, this variable is used to make the
# Ansible role aware of the members of ILP Validator cluster. Ansible will then
# execute some critical actions only once per cluster (on the first node of the
# cluster). The variable needs to be filled with a list of hostnames or FQDNs
# of the members of the cluster.
# NOTE: This variable must have the same value across all the members.
ilp_validator_cluster_members: ["{{ ansible_hostname }}"]

# Configuration of the connection to the database, the user and the Admin
ilp_validator_db_host: ''
ilp_validator_db_port: 5432
ilp_validator_db_user: user_ilpv
ilp_validator_db_pass: Passw0rd
ilp_validator_db_name: ilp_validator
# Administrator credentials for the database
ilp_validator_db_admin_user: ''
ilp_validator_db_admin_pass: ''

# Trusted certificates of external services. Certificates of the local
# Ripple services, where *_install_local=True, are trusted automatically.
ilp_validator_trusted_external_certs: []
# - ripple_solution_ca.crt

# Setting this to true will instruct Ansible to take care of configuring all the
# Ripple Solution components installed on the machine with the configuration of
# this ILP Validator
ilp_validator_install_local: true

# If present, the URL of the reverse proxy. The role assumes that the reverse
# proxy is in front of the load balancer (if present).
ilp_validator_reverse_proxy_url: ''

# If present, the URL of the load balancer. The role assumes that the reverse
# proxy (if present) is in front of the load balancer.
ilp_validator_load_balancer_url: ''

# Ed25519 keys for the ILP Validator. If left empty Ansible will create the key
# pair automatically but manual creation is recommended. Check the Ripple
# documentation on how to use the script ed25519_key_pair_generator.js
# NOTE: The ilp_validator_public_key must be shared across members of the same
# cluster and for this reason, when configuring a cluster, the only option is to
# create the key pair manually.
ilp_validator_private_key: ''
ilp_validator_public_key: ''

# ILP Validator configuration
ilp_validator_config: {}
#  log_level: info
#  use_https: "true"
